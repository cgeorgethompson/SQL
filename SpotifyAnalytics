# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

# First I determined the avg popularity, danceability, and energy by artist and track
SELECT
artist_name
, track_name
, avg(popularity)
, avg(danceability)
, avg(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

# Then I determined who the top 10 artists based on popularity were
SELECT track_name, artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

# Additionally, I determined what artists have multiple popular tracks and how many tracks they have
SELECT artist_name, count(*) as num_popular_tracks
FROM BIT_DB.Spotifydata
WHERE popularity >= 80
GROUP BY artist_name
HAVING count(*)>1
ORDER BY num_popular_tracks desc
;

# Lastly, I wanted to determine which artist had the shortest track duration
SELECT 
artist_name
, track_name
, min(duration_ms) as shortest_duration
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY shortest_duration
LIMIT 1
;
